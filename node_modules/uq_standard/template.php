<?php

/**
 * @file
 * Contains the theme's functions to manipulate Drupal's markup.
 *
 * Complete documentation for this file is available online.
 *
 * @see https://drupal.org/node/1728096
 */

/**
 * Implements hook_theme().
 */
function uq_standard_theme($existing, $type, $theme, $path) {
  $themes = array(
    'site_header' => array(
      'template' => 'header',
      'variables' => array(
        'site_name' => '',
        'global_menu' => '',
        'site_search' => '',
        'site_utility' => '',
        'page_url' => '',
      ),
      'path' => $path . '/templates',
    ),
    'site_footer' => array(
      'template' => 'footer',
      'variables' => array(
        'last_modified' => NULL,
        'login_link' => '',
        'page_url' => '',
      ),
      'path' => $path . '/templates',
    ),
    'global_menu' => array(
      'template' => 'global-menu',
      'path' => $path . '/templates',
    ),
    'site_name' => array(
      'variables' => array(
        'site_name' => '',
        'base_url' => '',
      ),
    ),
    'site_utility' => array(
      'variables' => array(
        'content' => '',
      ),
    ),
    'site_search' => array(
      'template' => 'site-search',
      'variables' => array(
        'search_url' => '',
        'as_sitesearch' => '',
      ),
      'path' => $path . '/templates',
    ),
    'error_messages' => array(
      'variables' => array(
        'type' => NULL,
      ),
    ),
    'not_found_message' => array(
      'template' => 'message--404',
      'variables' => array(
        'base_url' => '',
        'site_name' => '',
        'page_url' => '',
      ),
      'path' => $path . '/templates',
    ),
    'denied_message' => array(
      'template' => 'message--403',
      'variables' => array(
        'base_url' => '',
        'site_name' => '',
        'login_button' => '',
      ),
      'path' => $path . '/templates',
    ),
  );

  return $themes;
}

/**
 * Alter CSS files before they are output on the page.
 *
 * @param array $css
 *   Array of all CSS items (files and inline CSS) being requested on the page.
 *
 * @see https://drupal.org/node/1728096
 */
function uq_standard_css_alter(array &$css) {
  $path_system = drupal_get_path('module', 'system');

  // Remove unwanted css files loaded by core and modules.
  $remove = array(
    $path_system . '/system.base.css',
    $path_system . '/system.menus.css',
    $path_system . '/system.messages.css',
    $path_system . '/system.theme.css',
    drupal_get_path('module', 'aggregator') . '/aggregator.css',
    drupal_get_path('module', 'node') . '/system.messages.css',
    drupal_get_path('module', 'node') . '/node.css',
    drupal_get_path('module', 'views') . '/css/views.css',
    drupal_get_path('module', 'field') . '/theme/field.css',
    drupal_get_path('module', 'ctools') . '/css/ctools.css',
    drupal_get_path('module', 'field_group') . '/horizontal-tabs/horizontal-tabs.css',
  );

  foreach ($remove as $stylesheet) {
    if (isset($css[$stylesheet])) {
      unset($css[$stylesheet]);
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function uq_standard_preprocess_html(array &$vars) {
  $vars['base_path'] = base_path();
  $vars['path_to_uq_standard'] = drupal_get_path('theme', 'uq_standard');

  $head_title_suffix = 'University of Queensland';
  if (drupal_is_front_page()) {
    $head_title_array = array(variable_get('site_name'), $head_title_suffix);
  }
  else {
    $head_title_array = array(
      drupal_get_title(),
      variable_get('site_name'),
      $head_title_suffix,
    );
  }
  $vars['head_title'] = implode(' - ', array_filter($head_title_array));

  $vars['html_attributes_array'] = array(
    'lang' => $vars['language']->language,
    'dir' => $vars['language']->dir,
  );

  // Add body class for 404 and 403 layouts.
  $status = drupal_get_http_header("status");
  if ($status == '404 Not Found') {
    $vars['classes_array'][] = 'page-error page-not-found';
  }
  elseif ($status == '403 Forbidden') {
    $vars['classes_array'][] = 'page-error page-access-denied';
  }

  $viewport = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'viewport',
      'content' => 'width=device-width,initial-scale=1',
    ),
  );
  drupal_add_html_head($viewport, 'viewport');

  drupal_add_css('https://static.uq.net.au/v6/fonts/Roboto/roboto.css', array('type' => 'external'));

  // Add apple touch icon - https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html
  drupal_add_html_head_link(array(
    'rel' => 'apple-touch-icon',
    'href' => 'https://static.uq.net.au/v4/logos/corporate/uq-apple-touch-icon.png',
    'type' => 'image/png',
  ));
}

/**
 * Implements hook_js_alter().
 */
function uq_standard_js_alter(&$javascript) {
  // Load Google Analytics script into a separate
  // scope so it can load in the <head>.
  foreach ($javascript as $key => $script) {
    if ($script['type'] == 'inline' && strpos($script['data'], 'GoogleAnalyticsObject') !== FALSE) {
      $javascript[$key]['scope'] = 'head_scripts';
      $javascript[$key]['type'] = 'inline';
      $javascript[$key]['weight'] = -1;
      $javascript[$key]['preprocess'] = FALSE;
    }
  }
}

/**
 * Implements hook_process_html().
 */
function uq_standard_process_html(&$vars, $hook) {
  $vars['html_attributes'] = drupal_attributes($vars['html_attributes_array']);
  $vars['head_scripts'] = drupal_get_js('head_scripts');
}

/**
 * Implements hook_preprocess_page().
 */
function uq_standard_preprocess_page(array &$vars, $hook) {
  $status = drupal_get_http_header("status");
  if ($status == '404 Not Found') {
    $vars['uq_standard_error_type'] = 404;
    $vars['theme_hook_suggestions'][] = 'page__404';
  }
  elseif ($status == '403 Forbidden') {
    $vars['uq_standard_error_type'] = 403;
    $vars['theme_hook_suggestions'][] = 'page__403';
    $vars['title'] = user_is_logged_in() ? t('Permission required') : t('Log in required');
    // Remove the default Drupal system message.
    unset($vars['page']['content']['system_main']['main']);
  }
  else {
    $vars['uq_standard_error_type'] = NULL;
  }

  $vars['login_url'] = url('user', array('query' => drupal_get_destination()));
  $vars['login_link'] = l(
    t('Login'), 'user', array(
      'attributes' => array(
        'class' => array('login__link'),
        'rel' => array('nofollow'),
      ),
      'query' => drupal_get_destination(),
    )
  );
}

/**
 * Implements hook_process_page().
 */
function uq_standard_process_page(array &$vars) {
  global $base_url;

  // Hide page.tpl.php title and hand over panel page title rendering
  // to page manager, if theme setting enabled.
  $vars['title_hidden'] = FALSE;
  $hide_page_title = FALSE;
  $hide_panel_page_title = theme_get_setting('uq_standard_hide_panel_page_title');

  // If page manager rendering current page and theme setting is TRUE
  // then hide the page title and layout dictates where it displays.
  if (module_exists('page_manager') && $hide_panel_page_title) {
    $hide_page_title = page_manager_get_current_page();
  }

  // Always hide page titles on the homepage.
  $status_header = drupal_get_http_header('status');
  $is_status_code_4XX = ($status_header[0] === '4');
  if ($vars['is_front'] || ($hide_page_title && !$is_status_code_4XX)) {
    $vars['title_hidden'] = TRUE;
  }

  // Hide primary tabs and hand over panel page title rendering to page manager.
  $vars['primary_tabs_hidden'] = FALSE;
  $hide_primary_tabs = FALSE;
  $hide_panel_primary_tabs = theme_get_setting('uq_standard_hide_panel_primary_tabs');
  // Delegate panel page primary tabs rendering to page manager, if enabled.
  if (module_exists('page_manager') && $hide_panel_primary_tabs) {
    $hide_primary_tabs = page_manager_get_current_page();
  }

  if ($vars['is_front'] || $hide_primary_tabs) {
    $vars['primary_tabs_hidden'] = TRUE;
  }

  // Show/hide site default UQ site_search and call THEME_site_search to render.
  $vars['site_search_hidden'] = theme_get_setting('uq_standard_hide_site_search');
  $site_search = ($vars['site_search_hidden']) ? '' : theme(
    'site_search', array(
      'search_url' => '//www.uq.edu.au/search',
      'as_sitesearch' => $base_url,
    )
  );

  $vars['page']['header'] = array(
    '#theme' => 'site_header',
    '#site_name' => theme(
      'site_name', array(
        'site_name' => $vars['site_name'],
        'base_url' => $base_url,
      )
    ),
    '#global_menu' => theme('global_menu'),
    '#site_search' => $site_search,
    '#site_utility' => theme('site_utility', array('content' => '')),
    '#page_url' => drupal_encode_path($base_url . request_uri()),
  );

  $vars['page']['error_messages'] = theme(
    'error_messages', array(
      'type' => $vars['uq_standard_error_type'],
      'site_name' => $vars['site_name'],
      'base_url' => $base_url,
      'login_link' => $vars['login_link'],
      'page_url' => drupal_encode_path($base_url . request_uri()),
    )
  );

  // Find and set last modified date of node to print in footer.
  $last_modified = NULL;
  if (isset($vars['node']) && isset($vars['node']->changed)) {
    $last_modified = $vars['node']->changed;
  }

  $vars['page']['footer'] = array(
    '#theme' => 'site_footer',
    '#last_modified' => $last_modified,
    '#login_link' => $vars['login_link'],
    '#page_url' => url(current_path(), ['absolute' => TRUE, 'query' => drupal_get_query_parameters()]),
  );
}

/**
 * Implements hook_preprocess_block().
 */
function uq_standard_preprocess_block(array &$vars) {
  $title_classes = &$vars['title_attributes_array']['class'];
  $content_classes = &$vars['content_attributes_array']['class'];

  // Add global classes to all blocks.
  $title_classes[] = 'block__title';
  $content_classes[] = 'block__content';

  // Add themeable class to main menu.
  if ($vars['block']->module == 'system' && $vars['block']->delta == 'main-menu') {
    $vars['classes_array'][] = 'main-menu';
    $vars['theme_hook_suggestions'][] = 'block__main_menu';
  }
}

/**
 * Implements template_preprocess_node().
 */
function uq_standard_preprocess_node(&$vars) {
  $node = $vars['node'];
  // Redefine template inheritance with the following order:
  // 1. node--{view-mode}.tpl.php
  // 2. node--{type}.tpl.php
  // 3. node--{type}--{view-mode}.tpl.php.
  if ($vars['view_mode']) {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['view_mode'];
  }
  if ($vars['view_mode']) {
    $vars['theme_hook_suggestions'][] = 'node__' . $node->type . '__' . $vars['view_mode'];
  }
  if (in_array('node__uq_event_session__teaser', $vars['theme_hook_suggestions'])) {
    $event_session_id = $vars['nid'];

    $query = new EntityFieldQuery();
    $query->fieldCondition('field_uq_event_sessions', 'target_id', $event_session_id, '=');
    $result = $query->execute();

    if (!empty($result['node'])) {
      $parent_id = current(array_keys($result['node']));
      $vars['parent_id'] = $parent_id;
      $vars['parent'] = node_load($parent_id);
    }
  }
}

/**
 * Returns html markup for the site title.
 *
 * @param array $vars
 *   An array of variables to pass to the theme template.
 *
 * @incgroup themeable
 */
function uq_standard_site_name(array $vars) {
  $site_name = $vars['site_name'];
  $base_url = $vars['base_url'];

  $site_prefix = theme_get_setting('site_prefix', 'uq_standard');
  $site_display = uq_standard_newline(theme_get_setting('site_display', 'uq_standard'));
  $site_display = $site_display ? $site_display : $site_name;
  $site_acronym = theme_get_setting('site_acronym', 'uq_standard');
  $site_abbr = ($site_acronym ? $site_acronym : $site_name);

  if ($site_prefix && $site_display) {
    $format = '<div class="site-title has-prefix"><a class="site-title__link" rel="home" title="!site_name" href="@base_url"><span class="hide-for-small-only"><span class="site-title__prefix">!site_prefix&nbsp;</span></span><span class="hide-for-small-only">!site_display</span> <span class="show-for-small-only">!site_abbr</span></a></div>';
  }
  elseif (strpos($site_display, PHP_EOL)) {
    $format = '<div class="site-title has-2-lines"><a class="site-title__link" rel="home" title="!site_name" href="@base_url"><span class="hide-for-small-only">!site_display</span> <span class="show-for-small-only">!site_abbr</span></a></div>';
  }
  else {
    $format = '<div class="site-title"><a class="site-title__link" rel="home" title="!site_name" href="@base_url"><span class="hide-for-small-only">!site_display</span> <span class="show-for-small-only">!site_abbr</span></a></div>';
  }

  $t = get_t();
  $title = $t($format, array(
    '@base_url' => htmlentities($base_url, ENT_QUOTES),
    '!site_name' => $site_name,
    '!site_prefix' => $site_display ? $site_prefix : "",
    '!site_display' => $site_display,
    '!site_abbr' => $site_abbr,
  ));

  return $title;
}

/**
 * Function to limit the number of line breaks to one.
 */
function uq_standard_newline($text) {
  $first_pos = strpos($text, "\n");
  if ($first_pos) {
    $first_line = substr($text, 0, $first_pos + 2);
    $second_line = substr($text, $first_pos + 2);
    $second_line = str_replace('\n', '', $second_line);
    $text = nl2br($first_line) . $second_line;
  }
  return $text;
}

/**
 * Site header placeholder component.
 *
 * Placeholder function to allow sites, modules and subthemes
 * to render advanced functionality in the site header.
 *
 * @param array $vars
 *   An array of variables to pass to the theme function.
 *
 * @incgroup themeable
 */
function uq_standard_site_utility(array $vars) {
  return $vars['content'];
}

/**
 * Returns HTML for the system status messages, grouping by error type.
 *
 * @param array $vars
 *   An array of variables to pass to the theme function.
 *
 * @incgroup themeable
 */
function uq_standard_status_messages(array $vars) {
  // Share status message formatting function with disable_messages module.
  $display = $vars['display'];
  $messages['messages'] = drupal_get_messages($display);

  return _uq_standard_status_messages($messages);
}

/**
 * Returns HTML for the disabled system messages (`disable_messages` module).
 *
 * @param array $vars
 *   An array of variables to pass to the theme function.
 *
 * @incgroup themeable
 */
function uq_standard_disable_messages_status_messages(array $vars) {
  return _uq_standard_status_messages($vars);
}

/**
 * Returns HTML for the error messages.
 *
 * Checks what error code and chooses appropriate theme function.
 *
 * @param array $vars
 *   An array of variables to pass to the theme function.
 *
 * @incgroup themeable
 */
function uq_standard_error_messages(array $vars) {
  $output = '';
  if ($vars['type'] === 403) {
    $output = theme('denied_message', $vars);
  }
  elseif ($vars['type'] === 404) {
    $output = theme('not_found_message', $vars);
  }

  return $output;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uq_standard_preprocess_denied_message(&$vars) {
  $vars['login_button'] = l(
    t('Log in'), 'user', array(
      'attributes' => array(
        'class' => array('button button--primary login__link'),
        'rel' => array('nofollow'),
      ),
      'query' => drupal_get_destination(),
    )
  );
}

/**
 * Generates HTML for system status messages, grouping errors by type.
 *
 * @param array $vars
 *   An array of variables to pass to the theme function.
 *
 * @incgroup themeable
 */
function _uq_standard_status_messages(array $vars) {
  $messages = $vars['messages'];
  $output = '';

  $status_heading = array(
    'status' => t('Status message'),
    'error' => t('Error message'),
    'warning' => t('Warning message'),
  );

  if (!empty($messages)) {
    foreach ($messages as $type => $messages_array) {
      $output .= "<div class=\"messages messages--$type\">\n";
      if (!empty($status_heading[$type])) {
        $output .= '<h2 class="visually-hidden">' . $status_heading[$type] . "</h2>\n";
      }
      $output .= " <ul class=\"messages__list\">\n";

      foreach ($messages_array as $message) {
        $output .= '  <li class="messages__item">' . $message . "</li>\n";
      }
      $output .= " </ul>\n";
      $output .= "</div>\n";
    }
  }

  return $output;
}

/**
 * Implements hook_preprocess_maintenance_page().
 */
function uq_standard_preprocess_maintenance_page(&$vars, $hook) {
  uq_standard_preprocess_html($vars, $hook);
  uq_standard_preprocess_page($vars, $hook);
}

/**
 * Implements hook_process_maintenance_page().
 */
function uq_standard_process_maintenance_page(&$vars, $hook) {
  uq_standard_process_html($vars, $hook);
  uq_standard_process_page($vars);
  // Ensure default regions get a variable.
  foreach (array(
    'header',
    'navigation',
    'help',
    'top',
    'content',
    'footer',
    'bottom',
  ) as $region) {
    if (!isset($vars['page'][$region])) {
      $vars['page'][$region] = '';
    }
  }
}

/**
 * Returns HTML for a breadcrumb.
 *
 * @param array $vars
 *   An array of variables to pass to the theme function.
 *
 * @incgroup themeable
 */
function uq_standard_breadcrumb(array $vars) {
  $items = array();
  $breadcrumbs = array_slice($vars['breadcrumb'], 1);

  $home_screenreader = array(
    '#theme' => 'html_tag',
    '#tag' => 'span',
    '#attributes' => array(
      'class' => array('show-for-sr'),
      'itemprop' => 'name',
    ),
    '#value' => t('Home'),
  );

  $home_icon = array(
    '#theme' => 'html_tag',
    '#tag' => 'span',
    '#attributes' => array(
      'class' => array(
        'icon',
        'icon-uq-home',
      ),
      'title' => t('Home'),
    ),
    '#value' => NULL,
  );

  $home_position = array(
    '#theme' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'itemprop' => 'position',
      'content' => '1',
    ),
  );

  $home_link = array(
    '#theme' => 'html_tag',
    '#tag' => 'a',
    '#attributes' => array(
      'title' => t('Home'),
      'href' => '/',
      'class' => array(
        'breadcrumb__link',
        'breadcrumb__link--home',
      ),
    ),
    '#value' => render($home_screenreader) . render($home_icon),
  );

  if (!empty($breadcrumbs)) {
    $items['home'] = array(
      '#theme' => 'html_tag',
      '#tag' => 'li',
      '#attributes' => array(
        'class' => array(
          'breadcrumb',
          'breadcrumb--home',
        ),
        'itemprop' => array('itemListElement'),
        'itemscope' => '',
        'itemtype' => array('http://schema.org/ListItem'),
        'title' => t('Home'),
      ),
      '#value' => render($home_link) . render($home_position),
    );
  }

  foreach ($breadcrumbs as $breadcrumb_index => $breadcrumb_item) {
    $breadcrumb_position = array(
      '#theme' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'itemprop' => 'position',
        'content' => $breadcrumb_index + 1,
      ),
    );

    // Default to rendering the link as-is.
    $menu_link = str_replace('<a ', '<a class="breadcrumb__link" itemprop="item" ', $breadcrumb_item);

    // If `link_title` is present, render the link using a menu item.
    if (!empty($breadcrumb_item['link_title'])) {
      $options = array(
        'attributes' => array(
          'itemprop' => 'item',
          'class' => array(
            'breadcrumb__link',
          ),
        ),
        'html' => TRUE,
      );
      $link_title = array(
        '#theme' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => array(
          'itemprop' => array('name'),
        ),
        '#value' => $breadcrumb_item['link_title'],
      );
      $menu_link = l(render($link_title), $breadcrumb_item['link_path'], $options);
    }

    $items[] = array(
      '#theme' => 'html_tag',
      '#tag' => 'li',
      '#attributes' => array(
        'class' => array('breadcrumb'),
        'itemprop' => array('itemListElement'),
        'itemscope' => '',
        'itemtype' => array('http://schema.org/ListItem'),
      ),
      '#value' => $menu_link . render($breadcrumb_position),
    );
  }

  $output = array(
    '#type' => 'html_tag',
    '#tag' => 'ol',
    '#attributes' => array(
      'class' => array('breadcrumb-trail'),
      'itemscope' => '',
      'itemtype' => array('http://schema.org/BreadcrumbList'),
    ),
    '#value' => render($items),
  );

  return render($output);
}

/**
 * Returns HTML for the new theme wrapper for the menu tree.
 *
 * @param array $variables
 *   An array of variables to pass to the theme function.
 *
 * @return string
 *   The rendered markup.
 *
 * @incgroup themeable
 */
function uq_standard_menu_tree__main_menu(array $variables) {
  return '<ul class="menu">' . $variables['tree'] . '</ul>';
}

/**
 * Returns HTML for the new theme wrapper for the child menu tree.
 *
 * @param array $variables
 *   An array of variables to pass to the theme function.
 *
 * @return string
 *   The rendered markup.
 *
 * @incgroup themeable
 */
function uq_standard_menu_tree__main_menu_child(array $variables) {
  return '<ul class="menu__dropdown">' . $variables['tree'] . '</ul>';
}

/**
 * Override `theme_menu_link__main_menu`.
 *
 * @param array $variables
 *   An array of variables to pass to the theme function.
 *
 * @return string
 *   The rendered markup.
 */
function uq_standard_menu_link__main_menu(array $variables) {
  $element = $variables['element'];
  $sub_menu = '';

  $element['#localized_options']['attributes']['class'][] = 'menu__link';
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);

  if ($element['#below']) {
    $element['#below']['#theme_wrappers'][0] = 'menu_tree__main_menu_child';
    $sub_menu = drupal_render($element['#below']);
    $output .= '<a class="menu__dropdown-link" title="" href="#none"></a>';
  }

  return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Implements theme_date_display_range().
 */
function uq_standard_date_display_range($variables) {
  $date1 = $variables['date1'];
  $date2 = $variables['date2'];
  $timezone = $variables['timezone'];
  $attributes_start = $variables['attributes_start'];
  $attributes_end = $variables['attributes_end'];

  // Wrap the result with the attributes.
  return t('!start-date&ndash;!end-date', array(
    '!start-date' => '<span class="date--start"' . drupal_attributes($attributes_start) . '>' . $date1 . '</span>',
    '!end-date' => '<span class="date--end"' . drupal_attributes($attributes_end) . '>' . $date2 . $timezone . '</span>',
  ));
}

/**
 * Implements template_preprocess_field().
 */
function uq_standard_preprocess_field(&$var) {

  // Add theme hook suggestion with view mode.
  if (isset($var['element']) && isset($var['element']['#view_mode']) && !empty($var['theme_hook_suggestions'])) {
    $var['theme_hook_suggestions'][] = end($var['theme_hook_suggestions']) . '__' . $var['element']['#view_mode'];
  }

  // In order to respect new lines in multi line plain text fields,
  // adds <br> at end of each new line. Applies globally to all
  // plain_text text_long fields.
  if (!empty($var['element']['#field_type']) && $var['element']['#field_type'] == 'text_long') {
    if ($var['element']['#items']['0']['format'] === NULL || $var['element']['#items']['0']['format'] === 'plain_text') {
      foreach ($var['items'] as $index => $value) {
        if (!empty($var['items'][$index]['#markup'])) {
          $markup = $var['items'][$index]['#markup'];
          $var['items'][$index]['#markup'] = nl2br($markup);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function uq_standard_preprocess_views_view(&$variables) {
  $variables['attributes_array']['data-equalizer'] = NULL;
}
